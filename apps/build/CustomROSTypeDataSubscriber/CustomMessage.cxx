// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CustomMessage.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "CustomMessage.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define geometry_msgs_msg_Pose_max_cdr_typesize 56ULL;
#define CustomMessage_max_cdr_typesize 57664ULL;
#define geometry_msgs_msg_Point_max_cdr_typesize 24ULL;
#define geometry_msgs_msg_Quaternion_max_cdr_typesize 32ULL;
#define geometry_msgs_msg_Pose_max_key_cdr_typesize 0ULL;
#define CustomMessage_max_key_cdr_typesize 0ULL;
#define geometry_msgs_msg_Point_max_key_cdr_typesize 0ULL;
#define geometry_msgs_msg_Quaternion_max_key_cdr_typesize 0ULL;

CustomMessage::CustomMessage()
{
    // unsigned long m_index
    m_index = 0;
    // string m_message
    m_message ="";
    // geometry_msgs::msg::Pose m_pose


}

CustomMessage::~CustomMessage()
{



}

CustomMessage::CustomMessage(
        const CustomMessage& x)
{
    m_index = x.m_index;
    m_message = x.m_message;
    m_pose = x.m_pose;
}

CustomMessage::CustomMessage(
        CustomMessage&& x) noexcept 
{
    m_index = x.m_index;
    m_message = std::move(x.m_message);
    m_pose = std::move(x.m_pose);
}

CustomMessage& CustomMessage::operator =(
        const CustomMessage& x)
{

    m_index = x.m_index;
    m_message = x.m_message;
    m_pose = x.m_pose;

    return *this;
}

CustomMessage& CustomMessage::operator =(
        CustomMessage&& x) noexcept
{

    m_index = x.m_index;
    m_message = std::move(x.m_message);
    m_pose = std::move(x.m_pose);

    return *this;
}

bool CustomMessage::operator ==(
        const CustomMessage& x) const
{

    return (m_index == x.m_index && m_message == x.m_message && m_pose == x.m_pose);
}

bool CustomMessage::operator !=(
        const CustomMessage& x) const
{
    return !(*this == x);
}

size_t CustomMessage::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return CustomMessage_max_cdr_typesize;
}

size_t CustomMessage::getCdrSerializedSize(
        const CustomMessage& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.message().size() + 1;


    for(size_t a = 0; a < data.pose().size(); ++a)
    {
            current_alignment += geometry_msgs::msg::Pose::getCdrSerializedSize(data.pose().at(a), current_alignment);
    }

    return current_alignment - initial_alignment;
}

void CustomMessage::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_index;
    scdr << m_message.c_str();
    scdr << m_pose;


}

void CustomMessage::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_index;
    dcdr >> m_message;
    dcdr >> m_pose;

}

/*!
 * @brief This function sets a value in member index
 * @param _index New value for member index
 */
void CustomMessage::index(
        uint32_t _index)
{
    m_index = _index;
}

/*!
 * @brief This function returns the value of member index
 * @return Value of member index
 */
uint32_t CustomMessage::index() const
{
    return m_index;
}

/*!
 * @brief This function returns a reference to member index
 * @return Reference to member index
 */
uint32_t& CustomMessage::index()
{
    return m_index;
}

/*!
 * @brief This function copies the value in member message
 * @param _message New value to be copied in member message
 */
void CustomMessage::message(
        const std::string& _message)
{
    m_message = _message;
}

/*!
 * @brief This function moves the value in member message
 * @param _message New value to be moved in member message
 */
void CustomMessage::message(
        std::string&& _message)
{
    m_message = std::move(_message);
}

/*!
 * @brief This function returns a constant reference to member message
 * @return Constant reference to member message
 */
const std::string& CustomMessage::message() const
{
    return m_message;
}

/*!
 * @brief This function returns a reference to member message
 * @return Reference to member message
 */
std::string& CustomMessage::message()
{
    return m_message;
}
/*!
 * @brief This function copies the value in member pose
 * @param _pose New value to be copied in member pose
 */
void CustomMessage::pose(
        const std::array<geometry_msgs::msg::Pose, 1024>& _pose)
{
    m_pose = _pose;
}

/*!
 * @brief This function moves the value in member pose
 * @param _pose New value to be moved in member pose
 */
void CustomMessage::pose(
        std::array<geometry_msgs::msg::Pose, 1024>&& _pose)
{
    m_pose = std::move(_pose);
}

/*!
 * @brief This function returns a constant reference to member pose
 * @return Constant reference to member pose
 */
const std::array<geometry_msgs::msg::Pose, 1024>& CustomMessage::pose() const
{
    return m_pose;
}

/*!
 * @brief This function returns a reference to member pose
 * @return Reference to member pose
 */
std::array<geometry_msgs::msg::Pose, 1024>& CustomMessage::pose()
{
    return m_pose;
}


size_t CustomMessage::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return CustomMessage_max_key_cdr_typesize;
}

bool CustomMessage::isKeyDefined()
{
    return false;
}

void CustomMessage::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}
